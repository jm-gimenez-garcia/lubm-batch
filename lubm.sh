#!/bin/bash

function ctrl_c() {
        echo "Cleaning temporary files."
        for f in ${folder[@]}
        do
        	rm -rf ${f}
        done
        echo "Temporary files cleaned. Exiting."
}


function showhelp {
	echo
	echo "Script to create files with the a number of universities in the desired format. Version 1.0, 2018/02/26"
	echo "It uses LUBM to generate the data, raptor rapper to transform to the desired format, and optionaly gzip, bzip2, or lzop to compress the output."
	echo
	echo "Usage $0 [OPTION]"
	echo
	echo "  -c, --compress  compress the output in the desired format (gzip|bzip|lzop)"
	echo "  -f, --format    output format (see rapper options, default 'ntriples')"
	echo "  -h, --help      shows this help and exits"
	echo "  -i, --index     starting index (see LUBM options, default '1')"
	echo "  -l, --lubm      path to lubm folder (default '${HOME}/lubm')"
	echo "  -n, --number    number of files to generate (default '1')"
	echo "  -o, --onto      namespace of the ontology (see LUBM options, default 'https://wdaqua.eu/lubm')"
	echo "  -O, --output    output folder"
	echo "  -p, --parallel  run rapper in parallel"
	echo "  -t, --temp      temp folder to store files generated by LUBM (default '/tmp')"
	echo "  -u, --univ      number of universities per file (see LUBM options, default '1')"
	echo "  -v, --verbose   Verbose output (includes output from LUBM and raptor rapper)"
	echo
}

function tofile { # ${index} ${final} ${format} ${output} ${folder} ${redirection}
	find ${5} -name '*.owl' -exec rapper -o ${3} {} 2> ${6} \; | LC_ALL=C sort -u -T ${5} | LC_ALL=C sort -R -T ${5} > ${4}/lubm.${1}-${2}.${3}
	rm -rf ${5}
	case "$compress" in
		"gzip") gzip -f9 ${4}/lubm.${1}-${2}.${3} ;;
		"bzip") bzip2 -f9 ${4}/lubm.${1}-${2}.${3} ;;
		"lzop") lzop -Uf9 ${4}/lubm.${1}-${2}.${3} ;;
	esac
}

# Defaults
declare -i univ=1
declare -i index=1
declare -i number=1
declare -i seed=1
declare onto="https://wdaqua.eu/lubm"
declare format="ntriples"
declare lubm="${HOME}/lubm"
declare parallel=false
declare compress=false
declare temp=""
declare output=$(pwd)
declare redirection="/dev/null"

getopt --test > /dev/null
if [[ $? -eq 4 ]]; then
    # enhanced getopt works
    OPTIONS=c::f:hi:n:o:O:ps:t:u:v
	LONGOPTIONS=compress::,format:,help,index:,lubm:,number:,onto:,output:,parallel,seed:,temp:,univ:,verbose
    COMMAND=$(getopt -o $OPTIONS -l $LONGOPTIONS -n "$0" -- "$@")
    if [[ $? -ne 0 ]]; then
    	exit 2
    fi
    eval set -- "$COMMAND"
else
	echo "Enhanced getopt not supported. Brace yourself, this is not tested, but it should work :-)"
fi

while true; do
	case "$1" in
		-c|--compress)
			case "$2" in
				""|"gz"|"gzip") compress=gzip ; shift 2 ;;
				"bz"|"bzip"|"bzip2") compress=bzip ; shift 2 ;;
				"lz"|"lzo"|"lzop") compress=lzop ; shift 2 ;;
				*) echo "Wrong compression format" ; exit 3 ;;
			esac
			;;
		-f|--format)
			format=$2
			shift 2
			;;
		-i|--index)
			$index=$2
			shift 2
			;;
		-l|--lubm)
			lubm=$2
			shift 2
			;;
		-n|--number)
			number=$2
			shift 2
			;;
		-o|--onto)
			onto=$2
			shift 2
			;;
		-O|--output)
			output=$2
			shift 2
			;;
		-p|--parallel)
			parallel=true
			shift
			;;
		-s|--seed)
			seed=$2
			shift 2
			;;
		-t|--temp)
			temp=$(realpath ${2}) # TODO: check that it exists
			shift 2
			;;
		-u|--univ)
			univ=$2
			shift 2
			;;
		-v|--verbose)
			redirection="/dev/stderr"
			shift
			;;
		--)
			shift
			break
			;;
		*)
			showhelp
			exit 0
			;;
	esac
done

trap ctrl_c INT # Trapping CTRL+C to clean the temporary files # I think it does not work

declare -i final
for i in $(seq 1 ${number});
do
	if [[ "$temp" != "" ]]; then
		folder[i]=$(mktemp -d -p ${temp})
	else
		folder[i]=$(mktemp -d)
	fi
	mkdir ${folder[i]}/lubm
	cd ${folder[i]}/lubm
	final=${index}+${univ}-1
	echo "Generating ${univ} universities from ${index} to ${final} with seed ${seed} and namespace ${onto}"
	java -cp ${lubm}/classes/ edu.lehigh.swat.bench.uba.Generator -univ ${univ} -index ${index} -seed ${seed} -onto ${onto} > ${redirection}
	if [[ "$parallel" = true ]]; then
		echo "Generating file ${output}/lubm.${index}-${final}.${format} in parallel."
		tofile ${index} ${final} ${format} ${output} ${folder[i]} ${redirection} &
	else
		echo "Generating file ${output}/lubm.${index}-${final}.${format}."
		tofile ${index} ${final} ${format} ${output} ${folder[i]} ${redirection}
	fi
	pid[i]=$!
	index=$final+1
done

if [[ "$parallel" = true ]]; then
	for i in $(seq 1 ${number});
	do
		echo "Waiting for generation of file #${i} (PID ${pid[i]}) to finish."
		wait ${pid[i]}
	done
fi

echo
echo "--- Files succesfully generated ---"
echo